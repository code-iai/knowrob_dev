{
  "query": [
    {"q": "", "text": "----- init -----"},
    {"q": "register_ros_package(knowrob_mongo),\nregister_ros_package(mod_srdl),\nregister_ros_package(mod_execution_trace),\nvisualisation_canvas,\ndiagram_canvas.", "text": "init all"},
    {"q": "register_ros_package(knowrob_mongo).", "text": "register_ros_package(knowrob_mongo)."},
    {"q": "register_ros_package(mod_srdl).", "text": "register_ros_package(mod_srdl)."},
    {"q": "register_ros_package(mod_execution_trace).", "text": "register_ros_package(mod_execution_trace)."},

    {"q": "", "text": ""},
    {"q": "", "text": "----- marker canvas -----"},
    {"q": "visualisation_canvas.", "text": "init visualisation canvas"},
    {"q": "owl_individual_of(A, knowrob:'SemanticEnvironmentMap'), !, add_object_with_children(A).", "text": "add object to canvas"},
    {"q": "highlight_object_with_children('http://ias.cs.tum.edu/kb/knowrob.owl#Refrigerator67').", "text": "highlight object"},
    {"q": "reset_highlight.", "text": "reset highlight"},
    {"q": "remove_object_with_children('http://ias.cs.tum.edu/kb/knowrob.owl#Refrigerator67').", "text": "remove object"},

    {"q": "", "text": ""},
    {"q": "", "text": "----- diagram canvas -----"},
    {"q": "diagram_canvas.", "text": "init diagram canvas"},
    {"q": "add_diagram(id, title, piechart, xlabel, ylabel, '210', '210', '12px', [[[a,b],['1','2']]]).", "text": "add chart (piechart or barchart)"},
    {"q": "remove_diagram(id).", "text": "remove diagram"},
    {"q": "clear_diagram_canvas.", "text": "remove all diagrams"},

    {"q": "", "text": ""},
    {"q": "", "text": "----- owl -----"},
    {"q": "owl_parse('pick-and-place-no-details.owl', false, false, true).", "text": "parse owl file"},
    {"q": "owl_subclass_of(A, knowrob:'FoodOrDrink').", "text": "owl_subclass_of(A, knowrob:'FoodOrDrink')."},
    {"q": "owl_has(A, rdf:type, knowrob:'Drawer').", "text": "owl_has(A, rdf:type, knowrob:'Drawer')."},
    {"q": "owl_has(knowrob:'Refrigerator67', knowrob:properPhysicalParts, P).", "text": "owl_has(knowrob:'Refrigerator67', knowrob:properPhysicalParts, P)."},

    {"q": "", "text": ""},
    {"q": "", "text": "----- more tricky queries -----"},
    {"q": "owl_individual_of(A, knowrob:'SemanticEnvironmentMap'), rdf_reachable(PART, knowrob:describedInMap, A), rdf_reachable(PART, knowrob:properPhysicalParts, P).", "text": "get all parts and their physical parts of a map"},
    {"q": "findall(P, (owl_individual_of(A, knowrob:'SemanticEnvironmentMap'), rdf_reachable(PART, knowrob:describedInMap, A), rdf_reachable(PART, knowrob:properPhysicalParts, P)), L).", "text": "--all solutions of the above at once"},
    {"q": ", length(L, N).", "text": "---counting the solutions"},
    {"q": "owl_individual_of(A, knowrob:'SemanticEnvironmentMap'),\n\nfindall(L,\n  (rdf_reachable(PART, knowrob:describedInMap, A),\n    findall(P, (rdf_reachable(PART, knowrob:properPhysicalParts, P)), L)\n  ),\n  LL\n).", "text": "get a nested list LL with all kitchen parts and their subparts"},
    {"q": "owl_individual_of(A, knowrob:'SemanticEnvironmentMap'),\n\nfindall(\n  N,\n  (rdf_reachable(PART, knowrob:describedInMap, A),\n    findall(P, (rdf_reachable(PART, knowrob:properPhysicalParts, P)), L),\n    length(L, N)\n  ),\n  VALUES\n),\n\nfindall(PART, (rdf_reachable(PART, knowrob:describedInMap, A)), LABELS),\n\nadd_diagram(id, 'subparts of kitchen parts', barchart, xlabel, ylabel, '500', '500', '12px', [[LABELS,VALUES]]).", "text": "show subpart distribution of kitchen parts in diagram"},

    {"q": "", "text": ""},
    {"q": "", "text": "----- Logfile statistics -----"},
    {"q": "register_ros_package(knowrob_mongo),\nregister_ros_package(mod_srdl),\nregister_ros_package(mod_execution_trace),\nvisualisation_canvas,\ndiagram_canvas.", "text": "init all"},
    {"q": "owl_parse('path/to/pick-and-place.owl', false, false, true).", "text": "Parse logfile"},
    {"q": "Labels = ['ManipulationPoseUnreachable', 'ObjectNotFound', 'ManipulationFailed', 'LocationNotReached', 'ObjectLost', 'ManipulationPoseOccupied'],findall(N, (\nmember(Error, Labels),\n    findall(E, (failure_class(E, C), string_concat('http://ias.cs.tum.edu/kb/knowrob.owl#', Error, C)), List), length(List, N)\n  ),\nOccurence),\nadd_diagram(iderror, 'error distribution', barchart, xlabel, ylabel, '210', '210', '12px', [[Labels,Occurence]]).", "text": "Show occurences of typical error types in bar or donut chart - new file format!"},
    {"q": "Labels = ['MANIPULATION-POSE-UNREACHABLE', 'OBJECT-NOT-FOUND', 'MANIPULATION-FAILED', 'LOCATION-NOT-REACHED', 'OBJECT-LOST', 'MANIPULATION-POSE-OCCUPIED'],\nfindall(N,\n  (\n    member(Error, Labels),\n    findall([E,B], (failure_task(E, C), failure_attribute(E, rdfs:'label', X), [X]=[literal(type(A,B))], B=Error), List), length(List, N)\n  ),\nOccurence),\nadd_diagram(iderror, 'error distribution', barchart, xlabel, ylabel, '210', '210', '12px', [[Labels,Occurence]]).", "text": "Show occurences of typical error types in bar or donut chart"},
    {"q": "Labels = ['Failed Instances', 'Successful Instances'], bagof(Err, (task_class(Task, knowrob:'PerformOnProcessModule'),  failure_task(Err, Task)), Errors), length(Errors, NumErr), bagof(Task, task_class(Task, knowrob:'PerformOnProcessModule'), Tasks), length(Tasks, NumT), NumSuccess is NumT- NumErr, add_diagram(iderror, 'error distribution', barchart, xlabel, ylabel, '210', '210', '12px', [[Labels,[NumErr, NumSuccess]]]).", "text": "Show occurences of errors in a certain task type bar or donut chart"},
    {"q": "aggregate_all(sum(D) / count, (task(T),task_class(T, knowrob:'UIMAPerception'),duration_of_a_task(T,D)), D1), Avg is D1, Labels = ['Duration in seconds'], add_diagram(iderror, 'error distribution', barchart, xlabel, ylabel, '210', '210', '12px', [[Labels,[Avg]]]).", "text": " How long did a task of a certain type take on average?"},
    {"q": "findall(FailClass,(task_class(T, knowrob:'PerformOnProcessModule'), failure_task(F, T), failure_class(F, FailClass)), FailReasons).", "text": " Which were common problems for a certain task type?"},

    {"q": "", "text": ""},
    {"q": "", "text": "----- Trajectory -----"},
    {"q": "register_ros_package(knowrob_mongo),\nregister_ros_package(mod_srdl),\nregister_ros_package(mod_execution_trace),\nvisualisation_canvas,\ndiagram_canvas.", "text": "init all"},
    {"q": "add_trajectory('/base_link', knowrob:'timepoint_1377780210', knowrob:'timepoint_1377780235', '1').", "text": "Show trajectories for given tf-link between two timepoints"},

    {"q": "", "text": ""},
    {"q": "", "text": "----- Task Decomposition -----"},
    {"q": "task(T), subtask(T, S).", "text": " Which actions is a task composed of?"},
    {"q": "task(T), subtask_all(T, S).", "text": "Which motions are part of the task?"},

    {"q": "", "text": ""},
    {"q": "", "text": "----- Action Feasibility for a Robot -----"},
    {"q": "task_class(T, knowrob:'UIMAPerception'), action_feasible_on_robot(T, pr2:'PR2Robot1').", "text": " Can perception tasks be done by Raphael?"},

    {"q": "", "text": ""},
    {"q": "", "text": "----- Belief of the Robot -----"},
    {"q": "task_goal(A,'GRASP'),task_end(A,End), !,\n mng_robot_pose_at_time(pr2:'PR2Robot1','/map',End,Pose),\n add_object_with_children(pr2:'PR2Robot1',End).", "text": " Where was the robot localized at the time of grasp?"},
    {"q": "findall([Obj, E], \n ((task_end(T,E), task_class(T,knowrob:'UIMAPerception'), returned_value(T, Obj))), \n  Objs),!, member([Obj, E], Objs), belief_at(loc(Obj,Loc), E), \n add_object_as_semantic_instance(Obj, Loc, E, SemanticMapInstance), \n add_object_with_children(SemanticMapInstance).", "text": "Where were the objects perceived during the execution?"},
    {"q": "task(T), task_goal(T, '(OBJECT-PLACED-AT ?OBJ ?LOC)'), task_start(T, S), task_end(T, E), add_trajectory('/base_link', S, E, '1').", "text": "PR2's path during the execution"},
    {"q": "remove_object_with_children(pr2:'PR2Robot1').", "text": "Stop publishing PR2 markers"},
    {"q": "remove_trajectory('/base_link').", "text": "Stop publishing trajectories to the scene"},
     

    {"q": "", "text": ""},
    {"q": "", "text": "----- Task Tree -----"},
    {"q": "assert((\n  tasktree(Task, List):-\n    findall(Subsub,\n      (\n        subtask(Task, Sub),\n        tasktree(Sub, Subsub)\n      ),\n      Sublist),\n    List = [Task, Sublist]\n)).", "text": "Assert tasktree rule (needed for following query, only invoke once)"},
    {"q": "owl_parse('path/to/log/pick-and-place.owl', false, false, true).", "text": "load owl file"},
    {"q": "Root = 'http://ias.cs.tum.edu/kb/cram_log.owl#CRAMAction_m2XW5s7U',\ntasktree(Root, List), flatten(List, Flat), once(maplist( \\X^Node^(((subtask(P, X), Parent = P); Parent = X), ((returned_value(X, Value), Color = red); Color = green),\natom_concat('Name: ', X, Namestring),\natom_concat('Parent: ', Parent, Parentstring),\nNode = [[X, Parent, Color],[Namestring, Parentstring, Color]]), Flat, Nodes)), add_diagram(tree, title, treechart, xlabel, ylabel, '960', '500', '12px', Nodes).", "text": "Show tasks and subtasks as a tree (adjust root node)"}
  ]
}
